import streamlit as st
import numpy as np
import random
from collections import deque

st.set_page_config(page_title="AI Navigator (Touch Mode)", layout="centered")

st.title("üß† ‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢ AI: ‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏Ç‡∏≤‡∏ß‡∏á‡∏Å‡∏ï‡∏î‡πâ‡∏ß‡∏¢ BFS ‡πÅ‡∏•‡∏∞ DFS")
st.markdown("‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏ö‡πÄ‡∏•‡πá‡∏ï: ‡∏Å‡∏î‡∏á‡πà‡∏≤‡∏¢ ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏ô‡∏∏‡∏Å!")

# Layout improvements
st.markdown("### üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏Ç‡∏≤‡∏ß‡∏á‡∏Å‡∏ï‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ AI")

# Setup grid and obstacles
GRID_SIZE = st.slider("üìè ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏Ç‡∏≤‡∏ß‡∏á‡∏Å‡∏ï (‡∏ä‡πà‡∏≠‡∏á)", 4, 10, 5)
maze = np.zeros((GRID_SIZE, GRID_SIZE), dtype=int)
obstacles_count = st.slider("üöß ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á", 0, GRID_SIZE * 2, GRID_SIZE)

# Generate obstacles randomly
for _ in range(obstacles_count):
    x, y = random.randint(0, GRID_SIZE-1), random.randint(0, GRID_SIZE-1)
    maze[x][y] = 1

start = (0, 0)
goal = (GRID_SIZE - 1, GRID_SIZE - 1)
maze[start] = 0
maze[goal] = 0

# Display maze using emoji
def display_maze(maze, path=None):
    table = ""
    for i in range(GRID_SIZE):
        for j in range(GRID_SIZE):
            if (i, j) == start:
                cell = "üü¢"
            elif (i, j) == goal:
                cell = "üèÅ"
            elif path and (i, j) in path:
                cell = "üü°"
            elif maze[i][j] == 1:
                cell = "‚¨õ"
            else:
                cell = "‚¨ú"
            table += cell
        table += "\n"
    st.markdown(f"<pre style='font-size: 24px'>{table}</pre>", unsafe_allow_html=True)

display_maze(maze)

# Search algorithms
def bfs(maze, start, goal):
    queue = deque([([start], start)])
    visited = set()
    while queue:
        path, (x, y) = queue.popleft()
        if (x, y) == goal:
            return path
        for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]:
            nx, ny = x + dx, y + dy
            if 0 <= nx < GRID_SIZE and 0 <= ny < GRID_SIZE and maze[nx][ny] == 0 and (nx, ny) not in visited:
                visited.add((nx, ny))
                queue.append((path + [(nx, ny)], (nx, ny)))
    return []

def dfs(maze, start, goal):
    stack = [([start], start)]
    visited = set()
    while stack:
        path, (x, y) = stack.pop()
        if (x, y) == goal:
            return path
        for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]:
            nx, ny = x + dx, y + dy
            if 0 <= nx < GRID_SIZE and 0 <= ny < GRID_SIZE and maze[nx][ny] == 0 and (nx, ny) not in visited:
                visited.add((nx, ny))
                stack.append((path + [(nx, ny)], (nx, ny)))
    return []

# Radio buttons: big + spaced
algo = st.radio(
    "ü§ñ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ò‡∏∂‡∏° AI", 
    ["üîÑ ‡∏Ñ‡πâ‡∏ô‡∏Å‡∏ß‡πâ‡∏≤‡∏á (BFS)", "üîÅ ‡∏Ñ‡πâ‡∏ô‡∏•‡∏∂‡∏Å (DFS)"], 
    horizontal=True,
    index=0
)

# Big solve button
solve_button = st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÄ‡∏Ç‡∏≤‡∏ß‡∏á‡∏Å‡∏ï", use_container_width=True)

if solve_button:
    if "BFS" in algo:
        path = bfs(maze, start, goal)
    else:
        path = dfs(maze, start, goal)

    if path:
        st.success(f"‚úÖ ‡∏û‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏ô {len(path)-1} ‡∏Å‡πâ‡∏≤‡∏ß")
        display_maze(maze, path)
    else:
        st.error("üö´ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á")

# Sidebar for explanation
st.sidebar.markdown("## üìö ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢")
st.sidebar.markdown("""
### üîÑ BFS (‡∏Ñ‡πâ‡∏ô‡∏Å‡∏ß‡πâ‡∏≤‡∏á)
- ‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏ó‡∏∏‡∏Å‡∏ó‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏á‡∏•‡∏∂‡∏Å
- ‡πÑ‡∏î‡πâ‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
- ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î

### üîÅ DFS (‡∏Ñ‡πâ‡∏ô‡∏•‡∏∂‡∏Å)
- ‡∏•‡∏∏‡∏¢‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏î‡∏ó‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
- ‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏Å‡∏≤‡∏£‡∏±‡∏ô‡∏ï‡∏µ‡∏ß‡πà‡∏≤‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î

### üë©‚Äç‚öïÔ∏è ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå
- **BFS:** ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏î‡∏π‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏∏‡∏Å‡πÄ‡∏Ñ‡∏™‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏á‡∏°‡∏∑‡∏≠
- **DFS:** ‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡πÄ‡∏Ñ‡∏™‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡∏•‡∏∏‡∏¢‡πÄ‡∏•‡∏¢
""")
